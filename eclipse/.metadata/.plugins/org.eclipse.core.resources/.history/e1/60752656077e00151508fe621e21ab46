package org.tonoplace.mcmods.timetracker;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import net.minecraft.init.Blocks;

@Mod(modid = TimeTrackerMod.MODID, name=TimeTrackerMod.MOD_NAME, version = TimeTrackerMod.VERSION)
//@NetworkMod(channels = {"timetrackercomm"}, clientSideRequired=false, serverSideRequired=true, packetHandler=StatsPacketHandler.class)

public class TimeTrackerMod
{
    public static final String MODID = "tonoplace_timetracker";
    public static final String MOD_NAME = "Tachyon's Time Tracker";
    public static final String VERSION = "1.7.10-0.0.1";
    public static final String CHANNEL = "TimeTrackerComm";

    
    //private static short
//    private static final short COMM_RequestStats = 
    public static SimpleNetworkWrapper network; 
    @Instance(TimeTrackerMod.MODID)
    public static TimeTrackerMod instance;
    
    @EventHandler
    void preInit(FMLPreInitializationEvent event)
    {
    	// read config, ids
    	network = NetworkRegistry.INSTANCE.newSimpleChannel(CHANNEL);
    	network.r
    	
    }
    
    @EventHandler
    public void init(FMLInitializationEvent event)
    {
    	// internal mod setup comms
		// some example code
        System.out.println("DIRT BLOCK >> "+Blocks.dirt.getUnlocalizedName());
        System.out.println("Anvil >> " + Blocks.anvil.getUnlocalizedName());
    }
    
    @EventHandler
    public void postInit(FMLPostInitializationEvent event)
    {
    	// connect to other mods...
    }

	static {
		
	}

    /**
     * Tracks used channel discriminators, see static initialization block.
     */
    private static int channelDiscriminator;
    
    /**
     * For client to request the values of current stats, see static initialization block.
     */
    private static final int REQUEST_STATS_DISCRIMINATOR;
    
    /**
     * For client to request the list of available stats, see static initialization block.
     */
    private static final int REQUEST_AVAILABLE_DISCRIMINATOR;
    
    /**
     * For client to request a specific stat is reset, see static initialization block.
     */
    private static final int REQUEST_RESET_DISCRIMINATOR;
    
    /**
     * For client to request a new stat be added, see static initialization block.
     */
    private static final int REQUEST_ADD_DISCRIMINATOR;
    
    /**
     * For client to request a stat to be removed, see static initialization block.
     */
    private static final int REQUEST_DEL_DISCRIMINATOR;
    
    /**
     * For client to request a stat's the toggle of a stat as current, see static initialization block.
     */
    private static final int REQUEST_TOGGLE_DISCRIMINATOR;
    
    /**
     * For server to reply with current stat values, see static initialization block.
     */
    private static final int REPLY_STATS_DISCRIMINATOR;
    
    /**
     * For server to reply with available stats, see static initialization block.
     */
    private static final int REPLY_AVAILABLE_DISCRIMINATOR;
    
    /**
     * For server to reply to Rest,Add,Del,Toggle with outcome information.
     */
    private static final int REPLY_OTHER_DISCRIMINATOR;
     */
}
