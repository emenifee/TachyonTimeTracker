/**
 * 
 */
package org.tonoplace.mcmods.timetracker.data;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Date;

import net.minecraftforge.common.config.Configuration;

/**
 * @author BlackTachyon
 * Tracks a given statistic.
 */
public class TimeStatistic implements Serializable {
   private StatisticCategory category;
   private String playerName;
   private String statName;
   private long baseTime;
   private Date timeStamp;
   private boolean paused;
   private transient long lastSeconds;
   private transient String lastTime;
   //net.minecraftforge.event
   public TimeStatistic()
   {
      category = StatisticCategory.Global;
      playerName = "";
      statName = "";
      reset();
   }
   
   public TimeStatistic(StatisticCategory category, String playerName, String statName) {
      this.category = category;
      this.playerName = playerName==null ? "" : playerName;
      this.statName = statName==null ? "" : statName;
      reset();
   }
   
   public String GetName() {
      if(category==StatisticCategory.Global) {
         return statName;
      } else {
         return playerName + "." + statName;
      }
   }
   
   public synchronized void normalizeTime(Date normalizeTo) {
      if(normalizeTo==null)
         normalizeTo = new Date();
      if(!paused) {
         long sinceLastTimeStamp = normalizeTo.getTime() - timeStamp.getTime();
         baseTime += sinceLastTimeStamp;
      }
      timeStamp = normalizeTo;
   }
   
   public synchronized void reset() {
      baseTime = 0;
      timeStamp = new Date();
      paused = false;
      lastSeconds = -1;
      lastTime = "N/A";
   }
   
   public void pause() {
      paused = true;
   }
   
   public void unpause() {
      paused = false;
   }
   
   public String GetTime()
   {
      long totalSeconds = GetElapsedTime(new Date()) / 1000;
      // Skip additional calculation and formating if no measurable time has passed...  
      if (totalSeconds > lastSeconds) {
         lastSeconds  = totalSeconds;
         long seconds = totalSeconds % 60;
         long minutes = totalSeconds / 60 % 60;
         long hours   = totalSeconds / 3600 % 24;
         long days    = totalSeconds / 3600 / 24;
         lastTime     = String.format("%01dD %02d:%02d:%02d", days, hours, minutes, seconds);
      }
      return lastTime;
   }
  
   @Override
   public String toString() {
      return category + "." + GetName() + ": " + GetTime();
   }
   
   @Override
   public boolean equals(Object o) {
      TimeStatistic ts = (o instanceof TimeStatistic) ? (TimeStatistic)o : null;
      if(ts==null) return false;
      if(this==ts) return true;
      if(category==ts.category &&
         paused==ts.paused &&
         playerName.equals(ts.playerName) &&
         statName.equals(ts.statName))
      {
         Date timeCheck = new Date();
         return GetElapsedTime(timeCheck) == ts.GetElapsedTime(timeCheck);
      }
      return false;
   }
   
   @Override 
   public int hashCode() {
      return Arrays.hashCode(new Object[] { category, playerName, statName, paused } );
   }
   
   private synchronized long GetElapsedTime(Date since) {
      if(since==null)
         since = new Date();
      if(paused)
         return baseTime;
      else
         return baseTime + since.getTime() - timeStamp.getTime();
   }

   /**
    * @param config
    */
   public void load(Configuration config) {
      // TODO Auto-generated method stub
      
   }
   
   
}
