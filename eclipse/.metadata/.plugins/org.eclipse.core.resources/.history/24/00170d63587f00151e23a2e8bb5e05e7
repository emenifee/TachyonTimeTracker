/**
 * 
 */
package org.tonoplace.mcmods.timetracker.network;

import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;

/**
 * @author BlackTachyon
 * Network black-box to wire up all IMessage and IMessageHandlers
 */
public final class NetworkInfo {

	/**
	 * Simple network for passing messages between client and server.
	 */
	public static SimpleNetworkWrapper network;

	/**
	 * Simple network implementation channel this mod uses to communicate
	 * between client and server.
	 */
	private static final String CHANNEL;
	/**
	 * Tracks used channel discriminators, see static initialization block.
	 */
	private static int channelDiscriminator;
	/**
	 * For client to request the values of current stats, see static initialization block.
	 */
	private static final int REQUEST_STATS_DISCRIMINATOR;
	/**
	 * For client to request the list of available stats, see static initialization block.
	 */
	private static final int REQUEST_AVAILABLE_DISCRIMINATOR;
	/**
	 * For client to request a specific stat is reset, see static initialization block.
	 */
	private static final int REQUEST_RESET_DISCRIMINATOR;
	/**
	 * For client to request a new stat be added, see static initialization block.
	 */
	private static final int REQUEST_ADD_DISCRIMINATOR;
	/**
	 * For client to request a stat to be removed, see static initialization block.
	 */
	private static final int REQUEST_DEL_DISCRIMINATOR;
	/**
	 * For client to request a stat's the toggle of a stat as current, see static initialization block.
	 */
	private static final int REQUEST_TOGGLE_DISCRIMINATOR;
	/**
     * For server to reply with current stat values, see static initialization block.
     */
    private static final int REPLY_STATS_DISCRIMINATOR;
    
    /**
     * For server to reply with available stats, see static initialization block.
     */
    private static final int REPLY_AVAILABLE_DISCRIMINATOR;
    
    /**
     * For server to reply to Rest,Add,Del,Toggle with outcome information.
     */
    private static final int REPLY_OTHER_DISCRIMINATOR;

    /**
     * Initializes internal constants.
     */
	static {
		NetworkInfo.CHANNEL = "TimeTrackerComm";
	    NetworkInfo.channelDiscriminator = 0;
	    NetworkInfo.REQUEST_STATS_DISCRIMINATOR     = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_AVAILABLE_DISCRIMINATOR = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_RESET_DISCRIMINATOR     = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_ADD_DISCRIMINATOR       = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_DEL_DISCRIMINATOR       = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_TOGGLE_DISCRIMINATOR    = ++NetworkInfo.channelDiscriminator;
	    REPLY_STATS_DISCRIMINATOR       = ++NetworkInfo.channelDiscriminator;
	    REPLY_AVAILABLE_DISCRIMINATOR   = ++NetworkInfo.channelDiscriminator;
	    REPLY_OTHER_DISCRIMINATOR	    = ++NetworkInfo.channelDiscriminator;
	    // per http://www.minecraftforge.net/forum/index.php/topic,20135.0.html
	    // maximum PacketID available on channel is 255
	    if(NetworkInfo.channelDiscriminator>255)
	    {
	    	throw new ExceptionInInitializerError("Number of assigned channel discriminators on '" + NetworkInfo.CHANNEL + "' exceeds maximum.");
	    }
	    else
	    {
	    	System.out.println("Using " + NetworkInfo.channelDiscriminator + " of 255 possible packet discriminators on network channel '" + NetworkInfo.CHANNEL +"'.");
	    }
	}
}
