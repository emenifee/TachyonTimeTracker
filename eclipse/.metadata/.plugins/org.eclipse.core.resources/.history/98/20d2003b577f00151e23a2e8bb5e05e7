package org.tonoplace.mcmods.timetracker;

import org.tonoplace.mcmods.timetracker.network.NetworkInfo;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import net.minecraft.init.Blocks;

/**
 * Minecraft mod to support tracking time based statistics.
 * @author BlackTachyon
 *
 */
@Mod(modid = ModInfo.MODID, name=ModInfo.MOD_NAME, version = ModInfo.VERSION)
public class TimeTrackerMod
{
	/**
     * Public available instance of this mod.
     */
    @Instance(ModInfo.MODID)
    public static TimeTrackerMod instance;
    
    /**
     * Pre-initialization section, register block-ids, read config, assign
     * network channels, etc...
     * @param event The FMLPreInitializationEvent, marking this method for the pre-init lifecycle of FML. 
     *    
     */
    @EventHandler
    void preInit(FMLPreInitializationEvent event)
    {
    	NetworkInfo.network = NetworkRegistry.INSTANCE.newSimpleChannel(NetworkInfo.CHANNEL);
    }
    
    /**
     * Initialization section, initiate and add any new default stats as needed.
     * @param event The FMLInitializationEvent, marking this mode for the mod initialization lifecycle of FML.
     */
    @EventHandler
    public void init(FMLInitializationEvent event)
    {
    	// internal mod setup comms
		// some example code
        System.out.println("DIRT BLOCK >> "+Blocks.dirt.getUnlocalizedName());
        System.out.println("Anvil >> " + Blocks.anvil.getUnlocalizedName());
    }
    
    /**
     * Post-initialization section, communicate/cordinate with other mods as needed.
     * @param event The FMLPostInitializationEvent, marking this method for the post-init lifecycle of FML.
     */
    @EventHandler
    public void postInit(FMLPostInitializationEvent event)
    {
    	// connect to other mods...
    }

    ////////////////////////////////////////////////////////////////////////
    // PRIVATE INTERNAL VARIABLES
    ////////////////////////////////////////////////////////////////////////
    
    /**
     * For client to request a stat to be removed, see static initialization block.
     */
    private static final int REQUEST_DEL_DISCRIMINATOR;
    
    /**
     * For client to request a stat's the toggle of a stat as current, see static initialization block.
     */
    private static final int REQUEST_TOGGLE_DISCRIMINATOR;
    
    /**
     * For server to reply with current stat values, see static initialization block.
     */
    private static final int REPLY_STATS_DISCRIMINATOR;
    
    /**
     * For server to reply with available stats, see static initialization block.
     */
    private static final int REPLY_AVAILABLE_DISCRIMINATOR;
    
    /**
     * For server to reply to Rest,Add,Del,Toggle with outcome information.
     */
    private static final int REPLY_OTHER_DISCRIMINATOR;

    /**
     * Initializes internal constants.
     */
	static {
		NetworkInfo.CHANNEL = "TimeTrackerComm";
	    NetworkInfo.channelDiscriminator = 0;
	    NetworkInfo.REQUEST_STATS_DISCRIMINATOR     = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_AVAILABLE_DISCRIMINATOR = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_RESET_DISCRIMINATOR     = ++NetworkInfo.channelDiscriminator;
	    NetworkInfo.REQUEST_ADD_DISCRIMINATOR       = ++NetworkInfo.channelDiscriminator;
	    REQUEST_DEL_DISCRIMINATOR       = ++NetworkInfo.channelDiscriminator;
	    REQUEST_TOGGLE_DISCRIMINATOR    = ++NetworkInfo.channelDiscriminator;
	    REPLY_STATS_DISCRIMINATOR       = ++NetworkInfo.channelDiscriminator;
	    REPLY_AVAILABLE_DISCRIMINATOR   = ++NetworkInfo.channelDiscriminator;
	    REPLY_OTHER_DISCRIMINATOR	    = ++NetworkInfo.channelDiscriminator;
	    // per http://www.minecraftforge.net/forum/index.php/topic,20135.0.html
	    // maximum PacketID available on channel is 255
	    if(NetworkInfo.channelDiscriminator>255)
	    {
	    	throw new ExceptionInInitializerError("Number of assigned channel discriminators on '" + NetworkInfo.CHANNEL + "' exceeds maximum.");
	    }
	    else
	    {
	    	System.out.println("Using " + NetworkInfo.channelDiscriminator + " of 255 possible packet discriminators on network channel '" + NetworkInfo.CHANNEL +"'.");
	    }
	}
     
}
